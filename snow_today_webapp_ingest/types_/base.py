from pydantic import BaseModel, ConfigDict, Extra, RootModel
from pydantic.alias_generators import to_camel


# Redefining BaseModel was not a clear choice:
#   - It won't be obvious at a glance if a class inherits from pydantic.BaseModel vs
#     this one (as opposed to calling it e.g. SnowTodayBaseModel)
#   - But it also won't be possible to import pydantic.BaseModel from this module, which
#     I did accidentally and severely confused myself :)
# Is there a better way to prevent re-exports, perhaps with a checking tool?
class BaseModel(BaseModel):  # type:ignore[no-redef]
    model_config = ConfigDict(
        alias_generator=to_camel,
        # Allow using the Python field name instead of just the alias generated by
        # `to_camel`. For some reason, the latter is Pydantic's default.
        populate_by_name=True,
        extra=Extra.forbid,
        frozen=True,
    )


class RootModel(RootModel):  # type:ignore[no-redef]
    model_config = ConfigDict(frozen=True)
